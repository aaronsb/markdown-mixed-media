#!/usr/bin/env node
/**
 * Generate version information from git
 * Creates src/version.ts with git hash and tag info
 */

import { execSync } from 'child_process';
import { writeFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');
const outputPath = join(projectRoot, 'src', 'version.ts');

function getGitInfo() {
  try {
    // Get current commit hash (short)
    const gitHash = execSync('git rev-parse --short HEAD', {
      cwd: projectRoot,
      encoding: 'utf-8'
    }).trim();

    // Get current tag (if any)
    let gitTag = '';
    try {
      gitTag = execSync('git describe --tags --exact-match 2>/dev/null', {
        cwd: projectRoot,
        encoding: 'utf-8'
      }).trim();
    } catch (e) {
      // No exact tag match, try to get the latest tag
      try {
        gitTag = execSync('git describe --tags --abbrev=0 2>/dev/null', {
          cwd: projectRoot,
          encoding: 'utf-8'
        }).trim();
      } catch (e2) {
        gitTag = 'unknown';
      }
    }

    // Get branch name
    const gitBranch = execSync('git rev-parse --abbrev-ref HEAD', {
      cwd: projectRoot,
      encoding: 'utf-8'
    }).trim();

    // Check if working directory is dirty
    const gitDirty = execSync('git status --porcelain', {
      cwd: projectRoot,
      encoding: 'utf-8'
    }).trim() !== '';

    return {
      hash: gitHash,
      tag: gitTag,
      branch: gitBranch,
      dirty: gitDirty
    };
  } catch (error) {
    console.warn('Warning: Could not get git information:', error.message);
    return {
      hash: 'unknown',
      tag: 'unknown',
      branch: 'unknown',
      dirty: false
    };
  }
}

function generateVersionFile() {
  const gitInfo = getGitInfo();

  const content = `// This file is auto-generated by scripts/generate-version.js
// Do not edit manually

export const VERSION_INFO = {
  hash: '${gitInfo.hash}',
  tag: '${gitInfo.tag}',
  branch: '${gitInfo.branch}',
  dirty: ${gitInfo.dirty},
  buildDate: '${new Date().toISOString()}'
};

export function getVersionString(): string {
  const parts = [VERSION_INFO.tag];

  if (VERSION_INFO.hash !== 'unknown') {
    parts.push(\`(\${VERSION_INFO.hash}\${VERSION_INFO.dirty ? '-dirty' : ''})\`);
  }

  return parts.join(' ');
}
`;

  writeFileSync(outputPath, content, 'utf-8');
  console.log(`âœ“ Generated version info: ${gitInfo.tag} (${gitInfo.hash}${gitInfo.dirty ? '-dirty' : ''})`);
}

generateVersionFile();
